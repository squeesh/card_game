{% load staticfiles %}
<html>
    <head>
        <title>Learning WebGL &mdash; lesson 1</title>
        <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

        <style>
            body, html {
                width: 100%;
                height: 100%;
                border: 0px;
                padding: 0px;
                margin: 0px;
            }
            #lesson01-canvas {
                width: 50%;
                height: 50%;
                display: block;
            }
        </style>

        <script type="text/javascript" src="{% static 'js/glMatrix-0.9.5.min.js' %}"></script>
        <script id="shader-fs" type="x-shader/x-fragment">
            precision mediump float;

            void main(void) {
                gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
            }
        </script>
        <script id="shader-vs" type="x-shader/x-vertex">
            attribute vec3 aVertexPosition;

            uniform mat4 uMVMatrix;
            uniform mat4 uPMatrix;

            void main(void) {
                gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
            }
        </script>
        <script type="text/javascript">
            // var canvas;
            // var gl;
            // function initGL(canvas) {
            //     try {
            //         gl = canvas.getContext("experimental-webgl");
            //         gl.viewportWidth = canvas.width;
            //         gl.viewportHeight = canvas.height;
            //     } catch (e) {
            //     }
            //     if (!gl) {
            //         alert("Could not initialise WebGL, sorry :-(");
            //     }
            // }


            // // function getShader(gl, id) {
            // //     var shaderScript = document.getElementById(id);
            // //     if (!shaderScript) {
            // //         return null;
            // //     }

            // //     var str = "";
            // //     var k = shaderScript.firstChild;
            // //     while (k) {
            // //         if (k.nodeType == 3) {
            // //             str += k.textContent;
            // //         }
            // //         k = k.nextSibling;
            // //     }

            // //     var shader;
            // //     if (shaderScript.type == "x-shader/x-fragment") {
            // //         shader = gl.createShader(gl.FRAGMENT_SHADER);
            // //     } else if (shaderScript.type == "x-shader/x-vertex") {
            // //         shader = gl.createShader(gl.VERTEX_SHADER);
            // //     } else {
            // //         return null;
            // //     }

            // //     gl.shaderSource(shader, str);
            // //     gl.compileShader(shader);

            // //     if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            // //         alert(gl.getShaderInfoLog(shader));
            // //         return null;
            // //     }

            // //     return shader;
            // // }


            // // var shaderProgram;

            // // function initShaders() {
            // //     var fragmentShader = getShader(gl, "shader-fs");
            // //     var vertexShader = getShader(gl, "shader-vs");

            // //     shaderProgram = gl.createProgram();
            // //     gl.attachShader(shaderProgram, vertexShader);
            // //     gl.attachShader(shaderProgram, fragmentShader);
            // //     gl.linkProgram(shaderProgram);

            // //     if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            // //         alert("Could not initialise shaders");
            // //     }

            // //     gl.useProgram(shaderProgram);

            // //     shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
            // //     gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

            // //     shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
            // //     shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
            // // }


            // // var mvMatrix = mat4.create();
            // // var pMatrix = mat4.create();

            // // function setMatrixUniforms() {
            // //     gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
            // //     gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
            // // }



            // // var triangleVertexPositionBuffer;
            // // var squareVertexPositionBuffer;

            // // function initBuffers() {
            // //     triangleVertexPositionBuffer = gl.createBuffer();
            // //     gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexPositionBuffer);
            // //     var vertices = [
            // //          0.0,  1.0,  0.0,
            // //         -1.0, -1.0,  0.0,
            // //          1.0, -1.0,  0.0
            // //     ];
            // //     gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
            // //     triangleVertexPositionBuffer.itemSize = 3;
            // //     triangleVertexPositionBuffer.numItems = 3;

            // //     squareVertexPositionBuffer = gl.createBuffer();
            // //     gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
            // //     vertices = [
            // //          1.0,  1.0,  0.0,
            // //         -1.0,  1.0,  0.0,
            // //          1.0, -1.0,  0.0,
            // //         -1.0, -1.0,  0.0
            // //     ];
            // //     gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
            // //     squareVertexPositionBuffer.itemSize = 3;
            // //     squareVertexPositionBuffer.numItems = 4;
            // // }


            // function drawScene() {
            //     gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
            //     gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            //     // mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);

            //     // mat4.identity(mvMatrix);

            //     // mat4.translate(mvMatrix, [-1.5, 0.0, -7.0]);
            //     // gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexPositionBuffer);
            //     // gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
            //     // setMatrixUniforms();
            //     // gl.drawArrays(gl.TRIANGLES, 0, triangleVertexPositionBuffer.numItems);


            //     // mat4.translate(mvMatrix, [3.0, 0.0, 0.0]);
            //     // gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
            //     // gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
            //     // setMatrixUniforms();
            //     // gl.drawArrays(gl.TRIANGLE_STRIP, 0, squareVertexPositionBuffer.numItems);
            // }



            // function webGLStart() {
            //     canvas = document.getElementById("lesson01-canvas");
            //     initGL(canvas);
            //     // initShaders();
            //     // initBuffers();

            //     gl.clearColor(0.0, 0.0, 0.0, 1.0);
            //     gl.enable(gl.DEPTH_TEST);

            //     drawScene();
            // }

            var canvas;
            var gl;

            var render = function() {
                gl.viewport(0, 0, canvas.width, canvas.height);

                // Draw a 1 pixel border around the edge using
                // the scissor test since it's easier than setting up
                // a lot of stuff
                gl.clearColor(1, 0, 0, 1);  // red
                gl.disable(gl.SCISSOR_TEST);
                gl.clear(gl.COLOR_BUFFER_BIT);

                gl.enable(gl.SCISSOR_TEST);
                gl.scissor(1, 1, canvas.width - 2, canvas.height - 2);
                gl.clearColor(0, 0, 1, 1);  // blue
                gl.clear(gl.COLOR_BUFFER_BIT);
            };

            function resizeCanvas() {
                var width = canvas.clientWidth;
                var height = canvas.clientHeight;
                if (canvas.width != width ||
                canvas.height != height) {
                    canvas.width = width;
                    canvas.height = height;

                    // in this case just render when the window is resized.
                    render();
                }
            }

            function main() {
                canvas = document.getElementById("lesson01-canvas");
                gl = canvas.getContext("experimental-webgl");
                resizeCanvas();
            }

            window.addEventListener('resize', resizeCanvas);
            window.addEventListener('load', main);
        </script>
    </head>

    <body>
        <canvas id="lesson01-canvas" style="border: none;"></canvas>
    </body>
</html>
